---
description: 
globs: 
alwaysApply: true
---
# str-enum-case-check Commands and Guidelines

## Commands
- Build Release Rust binary (slow): `cargo build --release`
- Build Dev Rust binary (quick): `cargo build`
- Quick run Rust binary: `cargo run -- --path path/to/code` (builds dev version on the fly)
- Run tests (important): `cargo build && uv run pytest`

### Python Package Management
Done 100% via `uv`.
- Install deps specified in pyproject.toml: `uv sync`
- Install new package: `uv add [--dev] PACKAGE1 [PACKAGE2...]`
- Running Python: `uv run python <python arguments>`
- Running Pytest: `uv run pytest <pytest arguments>`
- Running with  one-off dependencies temporarily to check something without committing: `uv run --with=DEP1 [--with=DEP2...] python ...`
- NEVER run directly anything python-related: `pip`, `python`, `pip3`, nor `python3`. Always `uv`

### Rust Package Management
Done 100% via `cargo`.

### str-enum-case-check executable
- Supports --path=path/to/python/project
- Supports --exclude=FILE_OR_DIR_NAME[,FILE_OR_DIR_NAME...]

## Project Structure
- Rust implementation with Python test cases: obvious given that the tool's purpose is to parse Python with Rust

## Development
- Performance is critical: has to be less than 200ms execution even on large codebases
- Write simple, idiomatic Rust code that's easy to maintain
- Follow Rust best practices
- Run 'cargo build; uv run pytest' frequently between changes

## Instructions
- When fixing or writing, make minimal, surgical changes
- Follow the user's instructions: not more, not less
